-- This file is part of redylib
-- <http://redy-project.org/>
-- 
-- Copyright 2015 Ryan W. Johnson
-- 
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
-- 
--   http://www.apache.org/licenses/LICENSE-2.0
-- 
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
-------------------------------------------------------------------------------


without warning
--with define safe

include gui/gui.e as gui
include gui/dialogs/msgbox.e as msgbox

include std/task.e
include std/text.e
include std/pretty.e
include std/utils.e
include std/sequence.e

atom void

global constant 
App_Name = "Listbox Speed Demo",
App_Version = "1.0.a1",
App_AboutText = {
    App_Name & "™ " & App_Version & " (alpha)",
    "Copyright© 2014 Ryan Johnson™",
    "programmed by Ryan Johnson",
    "in the Euphoria programming language",
    "with Redy Application Environment™"
}

procedure gui_event(object evwidget, object evtype, object evdata)
    --switch evwidget do
    --end switch
end procedure



constant ctable = {  --color table, just to make it easy to give each plot a unique default color
   rgb(#FF, #3C, #00),
   rgb(#FF, #7B, #00),
   rgb(#FF, #BB, #00),
   rgb(#FF, #FB, #00),
   rgb(#C3, #FF, #00),
   rgb(#04, #FF, #00),
   rgb(#00, #FF, #BB),
   rgb(#00, #FF, #FB),
   rgb(#00, #C4, #FF),
   rgb(#00, #84, #FF)
}

function pick_color(atom idx) --pick a color from the color table
    atom len = length(ctable)
    while idx > len do  --wrap around if idx > length(ctable)
        idx -= len
    end while
    return ctable[idx]
end function

constant MaxLogLen = 100

procedure stream_test()
    sequence testlog = {}, numtxt
    
    while 1 do
        for x = 1 to MaxLogLen do
            numtxt = sprint(x)
            testlog &= {{pick_color(x), "Field " & numtxt, "Value of the item this is a test of the listbox widget class performance" & numtxt}}
            if length(testlog) > MaxLogLen then
                testlog = testlog[2..$]
            end if
            --gui:wproc("lstTest", "set_list_items", {testlog})
            gui:wproc("lstTest", "clear_list", {})
            gui:wproc("lstTest", "add_list_items", {testlog})
            task_yield()
        end for
    end while
end procedure
atom stream_task
    
                


procedure start()
    gui:wcreate({
        {"name", "winMain"},
        {"class", "window"},
        {"title", App_Name},
        {"position", {50, 50}},
        {"visible", 1},
        {"size", {800, 580}}
    })
    
    gui:wcreate({
        {"name", "cntMain"},
        {"parent", "winMain"},
        {"class", "container"},
        {"orientation", "vertical"},
        {"sizemode_x", "expand"},
        {"sizemode_y", "expand"}
    })
    gui:wcreate({
        {"name", "lstTest"},
        {"parent", "cntMain"},
        {"class", "listbox"},
        {"label", "Listbox"}
        --{"size", {600, 1000}}
    })
    
    gui:wproc("lstTest", "clear_list", {})
    gui:wproc("lstTest", "add_column", {{"Field", 80, 0, 0}})
    gui:wproc("lstTest", "add_column", {{"Value", 100, 0, 0}})
    
    stream_task = task_create(routine_id("stream_test"), {})
    --task_schedule(stream_task, {0.25, 0.5})
    task_schedule(stream_task, {0.01, 0.01})
    
    msgbox:msg("This is a refresh performance test, updating multiple listbox items inefficiently using 'clear_list' and 'add_list_items'.")
end procedure


gui:start(routine_id("start"), routine_id("gui_event"))



