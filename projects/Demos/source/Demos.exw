-- This file is part of redylib
-- <http://redy-project.org/>
-- 
-- Copyright 2015 Ryan W. Johnson
-- 
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
-- 
--   http://www.apache.org/licenses/LICENSE-2.0
-- 
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
-------------------------------------------------------------------------------


without warning

global sequence
App_Name = "Redy Demo",
App_Version = "1.0.a1"

include gui/gui.e as gui
include std/task.e
include std/text.e
include std/pretty.e

include dialog_preferences.e as pref
include gui/dialogs/about.e as about

--global constant App_Image_Path = "../../modules/gui/images"


atom void

sequence WelcomeText =
"Thank you for trying Redy" & 153 & " application environment!\n" &
"\n~~~~\n\n" &
"Redy is the first widget toolkit for the Euphoria programing language that " &
"is written in pure Euphoria code. The Redy widget system was designed from " &
"scratch and has a unique API that makes it very easy to build a professional " &
"quality graphical interface for your Euphoria programs.\n" &
"\n" &
"Welcome to the Demo Application. This program should give you a good idea of " &
"what Redy can do and how it might be useful for your next project.\n" &
"\n~~~~\n\n" &
RedyAE_AboutText,
BackCmds = {
    {DR_Image, "redy_logo", 0, 0},
    {DR_PenColor, rgb(200, 80, 150)},
    {DR_Rectangle, True, 100, 300, 350, 220},
    {DR_Font, "Arial", 12, Bold},
    {DR_TextColor, rgb(0, 127, 0)},
    {DR_PenPos, 160, 10},
    {DR_Puts, "Canvas Demo"},
    {DR_Font, "Arial", 12, Italic},
    {DR_TextColor, rgb(0, 0, 0)}
},
HandleTestCmds = {
    {DR_Rectangle, True, 100, 300, 350, 220}
}


procedure progress_gui_event(object evwidget, object evtype, object evdata)
    switch evwidget do
        case "winProgress.cmdClose" then
            switch evtype do
                case "clicked" then
                    gui:wdestroy("winProgress")
            end switch
            
    end switch
end procedure


procedure show_progress()
    --This procedure creates a dialog and simulates processing something by updating progress bars.
    gui:wcreate({
        {"name", "winProgress"},
        {"class", "window"},
        {"mode", "dialog"},
        {"title", "Doing Something..."},
        {"size", {600, 0}},
        {"handler", routine_id("progress_gui_event")},
        {"topmost", 1}
    })
    
    gui:wcreate({
        {"name", "winProgress.cntMain"},
        {"parent", "winProgress"},
        {"class", "container"},
        {"orientation", "vertical"},
        {"sizemode_x", "expand"},
        {"sizemode_y", "normal"}
    })
    
    gui:wcreate({
        {"name", "winProgress.txtSomething"},
        {"parent", "winProgress.cntMain"},
        {"class", "textbox"},
        {"size", {0, 100}},
        {"text", {
            "This is a demonstration of how Redy can have multiple tasks controlling the GUI. This could be a " &
            "task processing files and updating a progress bar, for example.",
            "While this is running, try doing something else in the demo program, such as typing in this text " &
            "editor, or select some text, and right click."
        }}
    })

    for i = 1 to 5 do
        gui:wcreate({
            {"name", "winProgress.prgSomething" & sprint(i)},
            {"parent", "winProgress.cntMain"},
            {"class", "progress"},
            {"label", "Do something #" & sprint(i) & " of 5"},
            {"value", 0}
        })
        task_schedule(task_self(), {0.01, 0.05})
        task_delay(0.5)
        for v = 0 to 100 by 2 do
            gui:debug("{i, v}", {i, v})
            task_delay(0.05)
            if i = 3 and v = 100 then
                gui:wproc("winProgress.prgSomething" & sprint(i), "set_value", {-2}) --demonstrate progress failure
            else
                gui:wproc("winProgress.prgSomething" & sprint(i), "set_value", {v})
            end if
        end for
    end for
    task_delay(0.5)
    
    gui:wcreate({
        {"name", "winProgress.cntBottom"},
        {"parent", "winProgress.cntMain"},
        {"class", "container"},
        {"orientation", "horizontal"},
        {"sizemode_x", "normal"},
        {"sizemode_y", "normal"},
        {"justify_x", "right"}
    })
    
    gui:wcreate({
        {"name", "winProgress.cmdClose"},
        {"parent", "winProgress.cntBottom"},
        {"class", "button"},
        {"label", "Close"}
    })
end procedure




procedure gui_event(object evwidget, object evtype, object evdata)
    gui:debug("demo gui_event", {evwidget, evtype, evdata})
    switch evwidget do
        --case "winAbout.btnOk" then
        --    gui:wdestroy("winAbout")
        
        case "mnuMain.mnuDemo" then
            switch evdata do
                case "Show Debug Console..." then
                    gui:show_debug()
                case "Exit" then
                    gui:wdestroy("winMain")
            end switch
            
        case "mnuMain.mnuDemo.mnuShow Demo" then
            switch evdata do
                case "Welcome" then
                    gui:wproc("lstDemo", "select_items", {{1}})
                case "Automatic Layout" then
                    gui:wproc("lstDemo", "select_items", {{2}})
                case "Trees and Lists" then
                    gui:wproc("lstDemo", "select_items", {{3}})
                case "Dialogs" then
                    gui:wproc("lstDemo", "select_items", {{4}})
                case "Canvases" then
                    gui:wproc("lstDemo", "select_items", {{5}})
                case "Tasks and Operations" then
                    gui:wproc("lstDemo", "select_items", {{6}})
                case "Errors and Debugging" then
                    gui:wproc("lstDemo", "select_items", {{7}})
            end switch
            
        case "mnuMain.mnuHelp" then
            switch evdata do
                case "About Redy..." then
                    about:show()
            end switch
        
        case "lstDemo" then
            show_demo(evdata[1][1])
        
        case "canDemo" then
            switch evtype do
                case "resized" then
                    --gui:wproc("canDemo", "set_background_pointer", {mCrosshair})
                    --gui:wproc("canDemo", "draw_background", {BackCmds})
                    --gui:wproc("canDemo", "set_handle", {"handletest", HandleTestCmds, mLink})
            end switch
            
        case "btnStartOperation" then
            if gui:wexists("winProgress") = 0 then
                gui:call_task(routine_id("show_progress"), {}) --this calls a procedure in a new task
            end if
        case "btnPreferences" then
            pref:show()
        
    end switch
end procedure







procedure show_demo(atom demo)

    if gui:wexists("cntDemo") then
        gui:wdestroy("cntDemo")
    end if
    gui:wcreate({
        {"name", "cntDemo"},
        {"parent", "cntRight"},
        {"class", "container"},
        {"orientation", "vertical"},
        {"sizemode_x", "expand"},
        {"sizemode_y", "expand"}
    })
    
    if demo = 1 then  --"Welcome"
        gui:wcreate({
            {"name", "txtDemo"},
            {"parent", "cntDemo"},
            {"class", "textbox"},
            {"text", WelcomeText}
        })
        
    elsif demo = 2 then  --"Automatic Layout"
        
        gui:wcreate({
            {"name", "cntDemoTop"},
            {"parent", "cntDemo"},
            {"class", "container"},
            {"orientation", "horizontal"},
            {"sizemode_x", "expand"},
            {"sizemode_y", "expand"}
        })
        
        gui:wcreate({
            {"name", "txtDemo"},
            {"parent", "cntDemoTop"},
            {"class", "textbox"},
            {"text", {
                "Redy AE automatically arranges widgets. By placing widgets in containers, widgets will intelligently " &
                "arrange themselves so you never have to worry about calculating widget coordinates and sizes.",
                "",
                "Also, moveable dividers are availible. Try resizing this window and moving the dividers around."
            }}
        })
                
        gui:wcreate({
            {"name", "divTest1"},
            {"parent", "cntDemoTop"},
            {"class", "divider"},
            {"attach", "txtDemo"}
        })
                
        gui:wcreate({
            {"name", "lstTopTest"},
            {"parent", "cntDemoTop"},
            {"class", "fancylist"},
            {"label", "List Box"}
        })
        
        gui:wproc("lstTopTest", "clear_list", {})
        gui:wproc("lstTopTest", "add_list_items", {{
            {0, "Type 0", "Item 1", "Extra information"},
            {0, "Type 0", "Item 2", "Extra information"},
            {1, "Type 1", "Item 3", "Extra information"},
            {1, "Type 1", "Item 4", "Extra information"},
            {1, "Type 1", "Item 5", "Extra information"},
            {2, "Type 2", "Item 6", "Extra information"},
            {1, "Type 1", "Item 8", "Extra information"}
        }})
        
        
        gui:wcreate({
            {"name", "divTest2"},
            {"parent", "cntDemo"},
            {"class", "divider"},
            {"attach", "cntDemoTop"}
        })
        
        gui:wcreate({
            {"name", "cntDemoMiddle"},
            {"parent", "cntDemo"},
            {"class", "container"},
            {"orientation", "horizontal"},
            {"sizemode_x", "expand"},
            {"sizemode_y", "expand"}
        })
        
        gui:wcreate({
            {"name", "txtMiddleTest1"},
            {"parent", "cntDemoMiddle"},
            {"class", "textbox"},
            {"label", " This is a textbox"}
        })


        gui:wcreate({
            {"name", "cntDemoBottom"},
            {"parent", "cntDemo"},
            {"class", "container"},
            {"orientation", "horizontal"},
            {"sizemode_x", "expand"},
            {"sizemode_y", "expand"}
        })
        
        gui:wcreate({
            {"name", "lstBottomTest"},
            {"parent", "cntDemoBottom"},
            {"class", "listbox"},
            {"label", "List Box"}
        })
        
        gui:wproc("lstBottomTest", "clear_list", {})
        gui:wproc("lstBottomTest", "add_column", {{"Type", 50, 0, 0}})
        gui:wproc("lstBottomTest", "add_column", {{"Name", 60, 0, 0}})
        gui:wproc("lstBottomTest", "add_column", {{"Details", 120, 0, 0}})
        gui:wproc("lstBottomTest", "add_list_items", {{
            {rgb(127, 0, 0), "Type 0", "Item 1", "Extra information"},
            {rgb(127, 127, 0), "Type 0", "Item 2", "Extra information"},
            {rgb(127, 0, 127), "Type 1", "Item 3", "Extra information"},
            {rgb(0, 127, 127), "Type 1", "Item 4", "Extra information"},
            {rgb(127, 64, 0), "Type 1", "Item 5", "Extra information"},
            {rgb(128, 0, 255), "Type 2", "Item 6", "Extra information"},
            {rgb(192, 0, 64), "Type 1", "Item 8", "Extra information"}
        }})
        
        gui:wcreate({
            {"name", "cntDemoBottomRight"},
            {"parent", "cntDemoBottom"},
            {"class", "container"},
            {"orientation", "vertical"},
            {"sizemode_x", "equal"},
            {"sizemode_y", "expand"}
        })
        
        for b = 1 to 4 do
            gui:wcreate({
                {"name", "btnCmd" & sprint(b)},
                {"parent", "cntDemoBottomRight"},
                {"class", "button"},
                {"label", "Command " & sprint(b)}
            })
        end for
        
            
    elsif demo = 3 then  --"Trees, and Lists"
        gui:wcreate({
            {"name", "cntDemoTop"},
            {"parent", "cntDemo"},
            {"class", "container"},
            {"orientation", "horizontal"},
            {"sizemode_x", "expand"},
            {"sizemode_y", "expand"}
        })
        
        gui:wcreate({
            {"name", "treTest"},
            {"parent", "cntDemoTop"},
            {"class", "treebox"},
            {"label", "Tree Box"},
            {"size", {160, 0}}
        })
        
        gui:wcreate({
            {"name", "divTree"},
            {"parent", "cntDemoTop"},
            {"class", "divider"},
            {"attach", "treTest"}
        })
        
        sequence treenodes = {}
        treenodes &= gui:wfunc("treTest", "add_item", {0, "eu16", "Root 1", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {0, "eu16", "Root 2", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {0, "eu16", "Root 3", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {0, "eu16", "Root 4", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {0, "eu16", "Root 5", 0})
        
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[1], "eu16", "item 1", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[1], "eu16", "item 2", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[1], "eu16", "item 3", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[1], "eu16", "item 4", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[1], "eu16", "item 5", 0})
        
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[2], "eu16", "item 1", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[2], "eu16", "item 2", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[2], "eu16", "item 3", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[2], "eu16", "item 4", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[2], "eu16", "item 5", 1})
        
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[3], "eu16", "item 1", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[3], "eu16", "item 2", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[3], "eu16", "item 3", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[3], "eu16", "item 4", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[3], "eu16", "item 5", 0})
        
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[4], "eu16", "item 1", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[4], "eu16", "item 2", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[4], "eu16", "item 3", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[4], "eu16", "item 4", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[4], "eu16", "item 5", 1})
        
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[5], "eu16", "item 1", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[5], "eu16", "item 2", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[5], "eu16", "item 3", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[5], "eu16", "item 4", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[5], "eu16", "item 5", 0})
        
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[8], "eu16", "item 1", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[8], "eu16", "item 2", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[8], "eu16", "item 3", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[8], "eu16", "item 4", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[8], "eu16", "item 5", 0})
        
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[10], "eu16", "item 1", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[10], "eu16", "item 2", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[10], "eu16", "item 3", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[10], "eu16", "item 4", 1})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[10], "eu16", "item 5", 1})        
        
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[32], "eu16", "item 1", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[32], "eu16", "item 2", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[32], "eu16", "item 3", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[32], "eu16", "item 4", 0})
        treenodes &= gui:wfunc("treTest", "add_item", {treenodes[32], "eu16", "item 5", 0})        
        
            
        
        gui:wcreate({
            {"name", "lstTest"},
            {"parent", "cntDemoTop"},
            {"class", "listbox"},
            {"label", "List Box"}
        })
        
        gui:wproc("lstTest", "clear_list", {})
        gui:wproc("lstTest", "add_column", {{"Type", 50, 0, 0}})
        gui:wproc("lstTest", "add_column", {{"Name", 60, 0, 0}})
        gui:wproc("lstTest", "add_column", {{"Details", 120, 0, 0}})
        gui:wproc("lstTest", "add_list_items", {{
            {rgb(127, 0, 0), "Type 0", "Item 1", "Extra information"},
            {rgb(127, 127, 0), "Type 0", "Item 2", "Extra information"},
            {rgb(127, 0, 127), "Type 1", "Item 3", "Extra information"},
            {rgb(0, 127, 127), "Type 1", "Item 4", "Extra information"},
            {rgb(127, 64, 0), "Type 1", "Item 5", "Extra information"},
            {rgb(128, 0, 255), "Type 2", "Item 6", "Extra information"},
            {rgb(192, 0, 64), "Type 1", "Item 8", "Extra information"},
            {rgb(127, 64, 0), "Type 0", "Item 1", "Extra information"},
            {rgb(127, 127, 64), "Type 0", "Item 2", "Extra information"},
            {rgb(64, 255, 127), "Type 1", "Item 3", "Extra information"},
            {rgb(64, 0, 255), "Type 1", "Item 4", "Extra information"},
            {rgb(127, 64, 127), "Type 1", "Item 5", "Extra information"},
            {rgb(128, 64, 128), "Type 2", "Item 6", "Extra information"},
            {rgb(192, 64, 64), "Type 1", "Item 8", "Extra information"}
        }})
    
    elsif demo = 4 then  --"Dialogs"
        gui:wcreate({
            {"name", "txtDemo"},
            {"parent", "cntDemo"},
            {"class", "textbox"},
            {"mode", "text"},
            {"text", {
                "Click on this button to show the Preferences dialog. Notice how this dialog has been set up to stay on top" &
                "of other windows and to be modal, which means you cannot interact with other windows of the application" &
                "until you close the dialog. These are optional properties, of course."
            }},
            {"size", {0, 150}}
            
        })
        
        gui:wcreate({
            {"name", "cntCmds"},
            {"parent", "cntDemo"},
            {"class", "container"},
            {"orientation", "horizontal"},
            {"sizemode_x", "equal"},
            {"sizemode_y", "normal"},
            {"justify_x", "center"},
            {"justify_y", "center"}
        })
        
        gui:wcreate({
            {"name",  "btnPreferences"},
            {"parent",  "cntCmds"},
            {"class", "button"},
            {"label", "Preferences..."}
        }) 
        
        --show_properties("thing 1", {{"field 1", "text 1"}, {"field 2", "text 2"}})
        --show_properties("thing 2", {{"field 1", "text 1"}, {"field 2", "text 2"}})
        
    elsif demo = 5 then  --"Canvases"
        gui:wcreate({
            {"name", "canDemo"},
            {"parent", "cntDemo"},
            {"class", "canvas"},
            {"label", "Canvas Demo"},
            {"handle_debug", 0}
        })
        
        gui:wproc("canDemo", "set_background_pointer", {"Crosshair"})
        gui:wproc("canDemo", "draw_background", {BackCmds})
        --gui:wproc("canDemo", "draw_foreground", {cmds})
        gui:wproc("canDemo", "set_handle", {"handletest", HandleTestCmds, "Link"})
        
        
    elsif demo = 6 then  --"Tasks and Operations"
        gui:wcreate({
            {"name", "cntCmds"},
            {"parent", "cntDemo"},
            {"class", "container"},
            {"orientation", "horizontal"},
            {"sizemode_x", "equal"},
            {"sizemode_y", "normal"},
            {"justify_x", "center"},
            {"justify_y", "center"}
        })
        
        gui:wcreate({
            {"name",  "btnStartOperation"},
            {"parent",  "cntCmds"},
            {"class", "button"},
            {"label", "Do Something..."}
        })       
        
        
    elsif demo = 7 then  --"Errors and Debugging
        --this demonstrates errors (the errors can be seen in the debug console) 
        --Test: name already exists
        
        gui:show_debug()
        
        gui:wcreate({
            {"name", "txtEditor"},
            {"parent", "cntDemo"},
            {"class", "textbox"},
            {"mode", "text"},
            {"text", {
                "The Debug Console helps you find errors in your GUI code."
            }}
        })
        gui:wcreate({
            {"name", "txtEditor"},
            {"parent", "cntDemo"},
            {"class", "textbox"},
            {"label", "Text Editor 2"}
        })
                
        --Test: parent name doesn't exist
        gui:wcreate({
            {"name", "txtEditor2"},
            {"parent", "cntDummy"},
            {"class", "textbox"},
            {"label", "Text Editor 3"}
        })
        
        --Test: class name doesn't exist
        gui:wcreate({
            {"name", "txtEditor4"},
            {"parent", "cntDemo"},
            {"class", "sandbox"},
            {"label", "Text Editor 4"}
        })
        
        --Test: command name doesn't exist
        gui:wproc("txtEditor", "make_breakfast", {})
        
        --Test: function name doesn't exist
        atom duhhh = gui:wfunc("txtEditor", "meaning_of_life", {})
        
        --Test: destroy widget that doesn't exist
        gui:wdestroy("planetEarth")
        
        --Test: command widget that doesn't exist
        gui:wproc("txtEditor42", "clear_text", {})


    end if
    


    
end procedure

procedure show_properties(sequence objname, sequence objdata)
        sequence wn = "win" & objname
        
        if gui:wexists(wn) then
            return
        end if
        
        gui:wcreate({
            {"name", wn},
            {"class", "window"},
            {"mode", "dialog"},
            {"title", objname & " Properties"},
            {"position", {50, 50}}
            --{"size", {350, 260}}
        })
        gui:wcreate({
            {"name", wn & ".cntMain"},
            {"parent", wn},
            {"class", "container"},
            {"orientation", "vertical"},
            {"sizemode_x", "expand"},
            {"sizemode_y", "expand"}
        })
        gui:wcreate({
            {"name", wn & ".cntTop"},
            {"parent", wn & ".cntMain"},
            {"class", "container"},
            {"orientation", "vertical"},
            {"sizemode_x", "expand"},
            {"sizemode_y", "expand"}
        })
        
        for i = 1 to length(objdata) do
            gui:wcreate({
                {"name",  wn & ".txt" & objdata[i][1]},
                {"parent",  wn & ".cntTop"},
                {"class", "textbox"},
                {"label", objdata[i][1]},
                {"text", objdata[i][2]}
            })
        end for
        
        gui:wcreate({
            {"name", wn & ".cntBottom"},
            {"parent", wn & ".cntMain"},
            {"class", "container"},
            {"orientation", "horizontal"},
            {"sizemode_x", "equal"},
            {"sizemode_y", "normal"}
        })
        
        gui:wcreate({
            {"name",  wn & ".btnOK"},
            {"parent",  wn & ".cntBottom"},
            {"class", "button"},
            {"label", "OK"}
        })
        
        gui:wcreate({
            {"name", wn & ".btnCancel"},
            {"parent",  wn & ".cntBottom"},
            {"class", "button"},
            {"label", "Cancel"}
        })
                
        gui:wcreate({
            {"name", wn & ".btnApply"},
            {"parent",  wn & ".cntBottom"},
            {"class", "button"},
            {"label", "Apply"}
        })
end procedure

procedure show_about()
    if gui:wexists("winAbout") = 0 then
        gui:wcreate({
            {"name", "winAbout"},
            {"class", "window"},
            {"title", "About Redy " & RedyAE_Version},
            {"position", {50, 50}},
            {"size", {550, 360}}
        })
        gui:wcreate({
            {"name", "winAbout.cntMain"},
            {"parent", "winAbout"},
            {"class", "container"},
            {"orientation", "vertical"},
            {"sizemode_x", "expand"},
            {"sizemode_y", "expand"}
        })
        gui:wcreate({
            {"name", "winAbout.cntTop"},
            {"parent", "winAbout.cntMain"},
            {"class", "container"},
            {"orientation", "vertical"},
            {"sizemode_x", "expand"},
            {"sizemode_y", "expand"}
        })
        
        
        gui:wcreate({
            {"name", "winAbout.txtInfo"},
            {"parent", "winAbout.cntTop"},
            {"class", "textbox"},
            {"text", RedyAE_AboutText}
        })
        
        gui:wcreate({
            {"name", "winAbout.cntBottom"},
            {"parent", "winAbout.cntMain"},
            {"class", "container"},
            {"orientation", "horizontal"},
            {"sizemode_x", "equal"},
            {"sizemode_y", "normal"},
            {"justify_x", "right"}
        })

        gui:wcreate({
            {"name", "winAbout.btnOk"},
            {"parent", "winAbout.cntBottom"},
            {"class", "button"},
            {"label", "OK"}
        })
    end if
end procedure


procedure start()
    gui:wcreate({
        {"name", "winMain"},
        {"class", "window"},
        {"title", "Redy 1.0.dev Tutorial"},
        {"position", {50, 50}},
        {"visible", 1},
        {"size", {700, 580}}
    })
    
    --fluidae:debug_mode(1)
    
    gui:wcreate({
        {"name", "cntMain"},
        {"parent", "winMain"},
        {"class", "container"},
        {"orientation", "horizontal"},
        {"sizemode_x", "expand"},
        {"sizemode_y", "expand"}
    })
    
    gui:load_bitmap("eu16", "eu16.bmp")
    --gui:load_bitmap("redy_logo", App_Image_Path & "/redy_logo.bmp")
    
    gui:wcreate({
        {"name", "mnuMain"},
        {"parent", "winMain"},
        {"class", "menubar"},
        {"menus", {
            {"Demo", {
                "Show Debug Console...", 
                {"Show Demo", {
                    "Welcome",
                    "Automatic Layout",
                    "Trees and Lists",
                    "Dialogs",
                    "Canvases",
                    "Tasks and Operations",
                    "Errors and Debugging"
                    }
                },
                "-",
                "Exit"
                }
            },
            {"Help", {
                "About Redy..."
                }
            }
        }
    }})
    
    gui:wcreate({
        {"name", "lstDemo"},
        {"parent", "cntMain"},
        {"class", "fancylist"},
        {"size", {200, 0}},
        {"label", "Select a Demo"}
    })
    
    gui:wproc("lstDemo", "clear_list", {})
    gui:wproc("lstDemo", "add_list_items", {{
        {0, "Welcome", "Redy Demo Application"},
        {1, "Automatic Layout", "Automatic layout engine"},
        {2, "Trees and Lists", "Interacting with data"},
        {2, "Dialogs", "Non-resizeable dialogs"},
        {3, "Canvases", "Interactive graphics"},
        {3, "Tasks and Operations", "Multitasking operations"},
        {4, "Errors and Debugging", "Showing debug information"}
    }})
    
    gui:wcreate({
        {"name", "cntRight"},
        {"parent", "cntMain"},
        {"class", "container"},
        {"orientation", "vertical"},
        {"sizemode_x", "expand"},
        {"sizemode_y", "expand"}
    })
    
    gui:wproc("lstDemo", "select_items", {{1}})
    
    --gui:show_debug()
end procedure

gui:start(routine_id("start"), routine_id("gui_event"))
