-- This file is part of RedyCodeâ„¢ Integrated Development Environment
-- <http://redy-project.org/>
-- 
-- Copyright 2016 Ryan W. Johnson
-- 
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
-- 
--   http://www.apache.org/licenses/LICENSE-2.0
-- 
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
-------------------------------------------------------------------------------


without warning
--with define debug


include redylib_0_9/app.e as app
include redylib_0_9/actions.e as action
include redylib_0_9/gui.e as gui

include redylib_0_9/gui/dialogs/dialog_file.e as dlgfile
include redylib_0_9/gui/dialogs/msgbox.e as msgbox

include redylib_0_9/err.e as err

include redylib_0_9/gui/objects/textdoc.e as txtdoc


include project.e
include build.e as build
include context.e as context
include navfile.e as navfile
include help.e
include preferences.e
include tips.e as tips
include splash.e

include std/task.e
include std/text.e
include std/pretty.e
include std/utils.e
include std/sequence.e
include std/filesys.e


--Define Application Info
app:define({
    {"title", "RedyCode"},
    {"version", "0.9.2"},
    {"website", "http://redy-project.org/"},
    {"author", "Ryan W. Johnson"},
    {"copyright", "2016 Ryan W. Johnson"},
    {"license", {
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
          "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License."
    }},
    {"about", "An open source Integrated Development Environment, which is written in the Euphoria programming language, " 
    & "to help you write graphical user interface applications in pure Euphoria code without using third-party widget toolkits."
    }
})

-- Edit Files ----------------------------------------------------------------

global sequence
FileTypeDescriptions = {
    "Euphoria Source Code",
    "Hypertext Documentation",
    "Bitmap Image"
},
FileTypeNames = {
    "source",
    "doc",
    "image"
},
FileTypeExts = {
    {"e", "eu", "ew", "ex", "exw"},
    {"htd"},
    {"bmp", "jpg", "jpeg", "png", "ico", "gif"}
},
RecentFiles = {},
CurrentTab = ""


action:define({
    {"name", "file_new"},
    {"do_proc", routine_id("do_file_new")},
    {"label", "New"},
    {"icon", "document-new"},
    {"hotkey", "Ctrl+N"},
    {"description", "Create new file"},
    {"enabled", 0}
})

action:define({
    {"name", "file_open"},
    {"do_proc", routine_id("do_file_open")},
    {"label", "Open..."},
    {"icon", "document-open"},
    {"hotkey", "Ctrl+O"},
    {"description", "Open a file"},
    {"enabled", 0}
})

action:define({
    {"name", "file_load"},
    {"do_proc", routine_id("do_file_load")},
    {"label", "Load Files"},
    --{"icon", "document-open"},
    --{"hotkey", "Ctrl+O"},
    {"description", "Load 1 or more specified files"}
})

action:define({
    {"name", "file_switch_to"},
    {"do_proc", routine_id("do_file_switch_to")},
    {"label", "Switch to File"},
    --{"list", {}},
    {"description", "Switch to specified open file"}
})

action:define({
    {"name", "file_open_recent"},
    {"do_proc", routine_id("do_file_open_recent")},
    {"label", "Open Recent"},
    {"list", {
        {"", "(no recent files)", ""} --{icon, label, data}
        --{"", "1 file2.txt", "file2.txt"},
        --{"", "2 file3.txt", "file3.txt"}
    }},
    {"description", "Open a recent file"},
    {"enabled", 0}
})

action:define({
    {"name", "file_cleanup_recent"},
    {"do_proc", routine_id("do_file_cleanup_recent")},
    {"label", "Remove nonexistant recent files"},
    {"icon", ""},
    {"description", "Remove nonexistant files from recent files list"},
    {"enabled", 0}
})

action:define({
    {"name", "file_clear_recent"},
    {"do_proc", routine_id("do_file_clear_recent")},
    {"label", "Clear recent files"},
    {"icon", ""},
    {"description", "Clear recent files list"},
    {"enabled", 0}
})

action:define({
    {"name", "file_save"},
    {"do_proc", routine_id("do_file_save")},
    {"label", "Save"},
    {"icon", "document-save"},
    {"hotkey", "Ctrl+S"},
    {"description", "Save current file"},
    {"enabled", 0}
})

action:define({
    {"name", "file_save_as"},
    {"do_proc", routine_id("do_file_save_as")},
    {"label", "Save As..."},
    {"icon", "document-save-as"},
    {"description", "Save current file to a different file"},
    {"enabled", 0}
})

action:define({
    {"name", "file_save_all"},
    {"do_proc", routine_id("do_file_save_all")},
    {"label", "Save All"},
    {"icon", ""},
    {"hotkey", "Shift+Ctrl+S"},
    {"description", "Save all open files"},
    {"enabled", 0}
})

action:define({
    {"name", "file_close"},
    {"do_proc", routine_id("do_file_close")},
    {"label", "Close"},
    {"icon", "process-stop"},
    {"hotkey", "Ctrl+F4"},
    {"description", "Close current file"},
    {"enabled", 0}
})

action:define({
    {"name", "file_close_all"},
    {"do_proc", routine_id("do_file_close_all")},
    {"label", "Close All"},
    {"icon", ""},
    {"description", "Close all open files"},
    {"enabled", 0}
})

app:set_menus({
    {"Project", {
        "project_new",
        "project_open",
        "project_close",
        "-",
        "project_save",
        "project_save_as",
        "-",
        "project_explore_folder",
        "project_refresh",
        "-",
        "project_settings",
        "-",
        "confirm_exit"}
    },
    {"File", {
        "file_new",
        "-",
        "file_open",
        /*{"Open Recent", {
            "file_open_recent",     --this will use list_func to automatically generate menu items
            "-",
            "file_cleanup_recent",
            "file_clear_recent"}
        },*/
        "file_close",
        "file_close_all",
        "-",
        "file_save",
        "file_save_as",
        "file_save_all"}
    },
    {"Edit", {
        "undo",
        "redo",
        "-",
        "cut",
        "copy",
        "paste",
        "-",
        "delete",
        "-",
        "select_all",
        "-",
        "format_indent_less",
        "format_indent_more",
        "-",
        "comment",
        "uncomment",
        "-",
        "beautify",
        "show_code_builder"}
    },
    {"Search", {
        "find",
        "find_replace",
        "find_prev",
        "find_next",
        "-",
        "show_goto",
        "show_bookmarks"}
    },
    {"Tools", {
        "show_preferences",
        "show_edit_toolbars",
        "-",
        "show_code_builder",
        "show_ascii_chart",
        "show_color_selector"}
    },
    {"Application", {
        "app_run_default",
        --"app_run",     --this will use list_func to automatically generate menu items for each .ex or .exw file in the project
        "-",
        "app_bind",
        "app_build",
        "-",
        "project_show_error"}
    },
    {"Help", {
        "show_help",
        "show_tips",
        "-",
        "show_about"}
    }
})

app:set_default_toolbars({
--    {"Project", "top", {
        /*"project_new",
        "project_open",
        "project_close",
        "-",
        "project_save",
        "project_save_as",
        "-",*/
--        "project_run"
        --"project_bind",
        --"project_build"}
--    },
    {"File", "top", {
        "file_new",
        "file_open",
        "file_close",
        "-",
        "file_save",
        "file_save_as"}
    },
    {"Edit", "top", {
        "undo",
        "redo",
        "-",
        "cut",
        "copy",
        "paste",
        "delete",
        "-",
        "format_indent_less",
        "format_indent_more"}
    },
    {"Search", "top", {
        "find",
        "find_replace",
        "-",
        "find_prev",
        "find_next",
        "-",
        "show_goto",
        "show_bookmarks"}
    }
})


-- Tab/File Management -----------------------------------------------------------------------------

constant NullFileName = "(Untitled)"

sequence
fTabNames = {},
fTabFileNames = {},
fTabFileTypes = {},
fTabFileReadOnlys = {},
fTabFileModifyTime = {}


export procedure update_tab_info(atom tabidx)
    navfile:refresh_toc()
    
    if gui:wexists(fTabNames[tabidx] & ".cntError") then
        gui:wdestroy(fTabNames[tabidx] & ".cntError")
    end if
    if gui:wexists(fTabNames[tabidx] & ".cntErrAnalysis") then
        gui:wdestroy(fTabNames[tabidx] & ".cntErrAnalysis")
    end if
    if gui:wexists(fTabNames[tabidx] & ".cntExtWarn") then
        gui:wdestroy(fTabNames[tabidx] & ".cntExtWarn")
    end if
    if gui:wexists(fTabNames[tabidx] & ".cntFileChanged") then
        gui:wdestroy(fTabNames[tabidx] & ".cntFileChanged")
    end if
    
    if sequence(pError) then --{errfile, errline, errtxt}
        if equal(fTabFileNames[tabidx], pError[1]) then --the current error is in this file
            --show error message
            gui:wcreate({
                {"name", fTabNames[tabidx] & ".cntError"},
                {"parent", fTabNames[tabidx] & ".cntContext"},
                {"class", "container"},
                {"orientation", "horizontal"},
                {"sizemode_x", "expand"},
                {"sizemode_y", "equal"},
                {"handler", routine_id("gui_event")}
            })
            gui:wcreate({
                {"name", fTabNames[tabidx] & ".canError"},
                {"parent", fTabNames[tabidx] & ".cntError"},
                {"class", "canvas"},
                {"size", {18, 30}},
                {"border", 0}
            })
            sequence cmds = {
                {DR_Image, "dialog-error", 1, 1, rgb(0, 0, 0)}
            }
            gui:wproc(fTabNames[tabidx] & ".canError", "draw_background", {cmds})
            
            gui:wcreate({
                {"name",  fTabNames[tabidx] & ".txtErrorInfo"},
                {"parent",  fTabNames[tabidx] & ".cntError"},
                {"class", "textbox"},
                {"mode", "text"},
                {"label", "Error in line " & sprint(pError[2]) & ":"},
                {"label_position", "above"},
                {"monowidth", 1},
                {"text", pError[3]}
                --{"size", {0, 64}}
            })
            gui:wcreate({
                {"name", fTabNames[tabidx] & ".cntErrorButtons"},
                {"parent", fTabNames[tabidx] & ".cntError"},
                {"class", "container"},
                {"orientation", "vertical"},
                {"sizemode_x", "equal"},
                {"sizemode_y", "normal"},
                {"justify_y", "center"},
                {"handler", routine_id("gui_event")}
            })
            gui:wcreate({
                {"name",  fTabNames[tabidx] & ".btnErrorGoToLine"},
                {"parent",  fTabNames[tabidx] & ".cntErrorButtons"},
                {"class", "button"},
                {"label", "Go to Line"}
            })
            gui:wcreate({
                {"name",  fTabNames[tabidx] & ".btnErrorHelp"},
                {"parent",  fTabNames[tabidx] & ".cntErrorButtons"},
                {"class", "button"},
                {"label", "Full Report"}
            })
            gui:wcreate({
                {"name",  fTabNames[tabidx] & ".btnErrorSaveAndRun"},
                {"parent",  fTabNames[tabidx] & ".cntErrorButtons"},
                {"class", "button"},
                {"label", "Save and Run"}
            })
        end if
    end if
    
    if equal(filesys:filename(fTabFileNames[tabidx]), "ex.err") then
        --show err analysis
        gui:wcreate({
            {"name", fTabNames[tabidx] & ".cntErrAnalysis"},
            {"parent", fTabNames[tabidx] & ".cntContext"},
            {"class", "container"},
            {"orientation", "horizontal"},
            {"sizemode_x", "expand"},
            {"sizemode_y", "equal"},
            {"handler", routine_id("gui_event")}
        })
        gui:wcreate({
            {"name",  fTabNames[tabidx] & ".txtErrAnalysisInfo"},
            {"parent",  fTabNames[tabidx] & ".cntErrAnalysis"},
            {"class", "textbox"},
            {"mode", "text"},
            --{"monowidth", 1},
            {"text", "Error Report"}
            --{"size", {0, 64}}
        })
        gui:wcreate({
            {"name", fTabNames[tabidx] & ".cntErrAnalysisButtons"},
            {"parent", fTabNames[tabidx] & ".cntErrAnalysis"},
            {"class", "container"},
            {"orientation", "vertical"},
            {"sizemode_x", "equal"},
            {"sizemode_y", "normal"},
            {"justify_y", "center"},
            {"handler", routine_id("gui_event")}
        })
        gui:wcreate({
            {"name",  fTabNames[tabidx] & ".btnErrAnalysisGoToError"},
            {"parent",  fTabNames[tabidx] & ".cntErrAnalysisButtons"},
            {"class", "button"},
            {"label", "Go to Error"}
        })
    end if
    
    if match(filesys:pathname(pPath), filesys:pathname(fTabFileNames[tabidx])) != 1 then
        --show external warning
        gui:wcreate({
            {"name", fTabNames[tabidx] & ".cntExtWarn"},
            {"parent", fTabNames[tabidx] & ".cntContext"},
            {"class", "container"},
            {"orientation", "horizontal"},
            {"sizemode_x", "expand"},
            {"sizemode_y", "equal"},
            {"handler", routine_id("gui_event")}
        })
        gui:wcreate({
            {"name", fTabNames[tabidx] & ".canExtWarn"},
            {"parent", fTabNames[tabidx] & ".cntExtWarn"},
            {"class", "canvas"},
            {"size", {18, 30}},
            {"border", 0}
        })
        sequence cmds = {
            {DR_Image, "dialog-warning", 1, 8, rgb(0, 0, 0)}
        }
        gui:wproc(fTabNames[tabidx] & ".canExtWarn", "draw_background", {cmds})
        gui:wcreate({
            {"name",  fTabNames[tabidx] & ".txtExtWarnInfo"},
            {"parent",  fTabNames[tabidx] & ".cntExtWarn"},
            {"class", "textbox"},
            {"mode", "text"},
            --{"monowidth", 1},
            {"text", "Warning: this file is outside the project folder. Modifying it may affect other programs."}
            --{"size", {0, 64}}
        })
        
        if txtdoc:is_locked(fTabNames[tabidx] & ".filepage") then
            gui:wcreate({
                {"name", fTabNames[tabidx] & ".cntExtWarnButtons"},
                {"parent", fTabNames[tabidx] & ".cntExtWarn"},
                {"class", "container"},
                {"orientation", "vertical"},
                {"sizemode_x", "equal"},
                {"sizemode_y", "normal"},
                {"justify_y", "center"},
                {"handler", routine_id("gui_event")}
            })
            gui:wcreate({
                {"name",  fTabNames[tabidx] & ".btnExtWarnEdit"},
                {"parent",  fTabNames[tabidx] & ".cntExtWarnButtons"},
                {"class", "button"},
                {"label", "Edit"}
            })
        end if
    end if
    
    if not equal(fTabFileModifyTime[tabidx], filesys:file_timestamp(fTabFileNames[tabidx])) then
        --show file changed
        gui:wcreate({
            {"name", fTabNames[tabidx] & ".cntFileChanged"},
            {"parent", fTabNames[tabidx] & ".cntContext"},
            {"class", "container"},
            {"orientation", "horizontal"},
            {"sizemode_x", "expand"},
            {"sizemode_y", "equal"},
            {"handler", routine_id("gui_event")}
        })
        gui:wcreate({
            {"name", fTabNames[tabidx] & ".canFileChanged"},
            {"parent", fTabNames[tabidx] & ".cntFileChanged"},
            {"class", "canvas"},
            {"size", {18, 30}},
            {"border", 0}
        })
        sequence cmds = {
            {DR_Image, "dialog-information", 1, 8, rgb(0, 0, 0)}
        }
        gui:wproc(fTabNames[tabidx] & ".canFileChanged", "draw_background", {cmds})
        
        if filesys:file_exists(fTabFileNames[tabidx]) then
            gui:wcreate({
                {"name",  fTabNames[tabidx] & ".txtFileChangedInfo"},
                {"parent",  fTabNames[tabidx] & ".cntFileChanged"},
                {"class", "textbox"},
                {"mode", "text"},
                --{"monowidth", 1},
                {"text", "This file has been changed. Would you like to reload it?"}
                --{"size", {0, 64}}
            })
            gui:wcreate({
                {"name", fTabNames[tabidx] & ".cntFileChangedButtons"},
                {"parent", fTabNames[tabidx] & ".cntFileChanged"},
                {"class", "container"},
                {"orientation", "vertical"},
                {"sizemode_x", "equal"},
                {"sizemode_y", "normal"},
                {"justify_y", "center"},
                {"handler", routine_id("gui_event")}
            })
            gui:wcreate({
                {"name",  fTabNames[tabidx] & ".btnFileChangedReload"},
                {"parent",  fTabNames[tabidx] & ".cntFileChangedButtons"},
                {"class", "button"},
                {"label", "Reload"}
            })
        else
            gui:wcreate({
                {"name",  fTabNames[tabidx] & ".txtFileChangedInfo"},
                {"parent",  fTabNames[tabidx] & ".cntFileChanged"},
                {"class", "textbox"},
                {"mode", "text"},
                --{"monowidth", 1},
                {"text", "This file does not exist."}
                --{"size", {0, 64}}
            })
        end if
        
    end if
end procedure


procedure select_file_tab(sequence filename)
    atom tabidx = find(filename, fTabFileNames)
    if tabidx > 0 then
        app:select_tab(fTabNames[tabidx])
        action:setfocus(fTabNames[tabidx])
    end if
end procedure


procedure create_tab(sequence tablabel, sequence filename, sequence txt, atom readonly = 0)
    sequence tabname = app:create_tab(tablabel, filename, readonly)
    sequence ext = filesys:fileext(filename)
    sequence SyntaxMode, filetype = "text", cmds
    atom ViewMode
    
    --sequence flist = {}
    --for f = 1 to length(fTabNames) do
    --    flist &= {{"document", fTabFileNames[f], fTabNames[f]}}
    --end for
    --set_list("file_switch_to", flist)
    
    if length(fTabNames) = 1 and equal(fTabFileNames[1], NullFileName) and not equal(filename, NullFileName) then
        destroy_tab(fTabNames[1])
    end if
    
    action:setfocus(tabname)
    
    if equal(filename, NullFileName) then
        filetype = "source"
        
    else
        if equal(ext, "err") then
            filetype = "text" --"source"
        else
            for st = 1 to length(FileTypeNames) do
                if find(ext, FileTypeExts[st]) then
                    switch FileTypeNames[st] do
                    case "source" then
                        filetype = "source"
                    case "doc" then
                        filetype = "doc"
                    case "image" then
                        filetype = "image"
                    case else
                        filetype = "text"
                    end switch
                end if
            end for
        end if
    end if
    
    fTabNames &= {tabname}
    fTabFileNames &= {filename}
    fTabFileTypes &= {filetype}
    fTabFileReadOnlys &= {readonly}
    fTabFileModifyTime &= {filesys:file_timestamp(filename)}
        
    app:set_tab_context_menu(tabname, {
        "file_close",
        "file_close_all",
        "-",
        "file_save",
        "file_save_as",
        "-",
        "file_reopen"
    })
    
    gui:wcreate({
        {"name", tabname & ".cntContext"},
        {"parent", tabname},
        {"class", "container"},
        {"orientation", "vertical"},
        {"sizemode_x", "expand"},
        {"sizemode_y", "normal"},
        {"handler", routine_id("gui_event")}
    })
    
    switch filetype do
    case "source" then
        txtdoc:create({
            {"name", tabname & ".filepage"},
            {"text", txt},
            {"view_mode", 0},
            {"syntax_mode", "euphoria"},
            {"show_hidden", 0},
            {"locked", readonly},
            {"autofocus", 1},
            {"handler", routine_id("gui_event")}
        })
        txtdoc:show(tabname & ".filepage", tabname)
        
    case "doc" then
        txtdoc:create({
            {"name", tabname & ".filepage"},
            {"text", txt},
            {"view_mode", 1},
            {"syntax_mode", "creole"},
            {"show_hidden", 1},
            {"locked", readonly},
            {"autofocus", 1},
            {"handler", routine_id("gui_event")}
        })
        txtdoc:show(tabname & ".filepage", tabname)
        
    case "image" then
        --todo: display image editor
        gui:wcreate({
            {"name", tabname & ".filepage"},
            {"parent", tabname},
            {"class", "canvas"},
            {"handler", routine_id("gui_event")}
        })
        if equal(filesys:fileext(filename), "bmp") then
            gui:load_bitmap(filename, filename)
            cmds = {
                {DR_Image, filename, 2, 2}
            }
        else
            cmds = {
                {DR_Font, "Tahoma", 12, Bold},
                {DR_TextColor, rgb(110, 40, 40)},
                {DR_PenPos, 2, 2},
                {DR_Puts, "Sorry, this image format is not currently supported."}
            }
        end if
        gui:wproc(tabname & ".filepage", "draw_background", {cmds})
        
    case else
        txtdoc:create({
            {"name", tabname & ".filepage"},
            {"text", txt},
            {"view_mode", 0},
            {"syntax_mode", "plain"},
            {"show_hidden", 0},
            {"locked", readonly},
            {"autofocus", 1},
            {"handler", routine_id("gui_event")}
        })
        txtdoc:show(tabname & ".filepage", tabname)
        
    end switch
end procedure


procedure destroy_tab(sequence tabname)
    atom idx = find(tabname, fTabNames)
    if idx > 0 then
        fTabNames = remove(fTabNames, idx)
        fTabFileNames = remove(fTabFileNames, idx)
        fTabFileTypes = remove(fTabFileTypes, idx)
        fTabFileReadOnlys = remove(fTabFileReadOnlys, idx)
        fTabFileModifyTime = remove(fTabFileModifyTime, idx)
        
        app:destroy_tab(tabname)
        txtdoc:destroy(tabname & ".filepage")
        
        if length(fTabNames) = 0 then
            action:set_enabled("file_close", 0)
            action:set_enabled("file_close_all", 0)
            action:set_enabled("file_save", 0)
            action:set_enabled("file_save_as", 0)
            action:set_enabled("file_save_all", 0)
            
            action:set_enabled("undo", 0)
            action:set_enabled("redo", 0)
            action:set_enabled("cut", 0)
            action:set_enabled("copy", 0)
            action:set_enabled("paste", 0)
            action:set_enabled("delete", 0)
            action:set_enabled("select_all", 0)
            action:set_enabled("comment", 0)
            action:set_enabled("uncomment", 0)
            action:set_enabled("beautify", 0)
            action:set_enabled("format_indent_less", 0)
            action:set_enabled("format_indent_more", 0)
            
            action:set_enabled("find", 0)
            action:set_enabled("find_prev", 0)
            action:set_enabled("find_next", 0)
            action:set_enabled("find_replace", 0)
            action:set_enabled("show_goto", 0)
            action:set_enabled("show_bookmarks", 0)
            
            --action:set_enabled("find_prev", 1)
            
        end if
        
        --sequence flist = {}
        --for f = 1 to length(fTabNames) do
        --    flist &= {{"document", fTabFileNames[f], fTabNames[f]}}
        --end for
        --set_list("file_switch_to", flist)
    end if
end procedure


-- Action Procs -----------------------------------------------------------------------------


procedure do_file_new()
    create_tab("Untitled", NullFileName, "")
end procedure


procedure do_file_open()
    object selfiles
    sequence ftypes = {}, exts, filelist = {}
    
    for ft = 1 to length(FileTypeDescriptions) do
        exts = {}
        for et = 1 to length(FileTypeExts[ft]) do
            if et > 1 then
                exts &= ";"
            end if 
            exts &= "*." & FileTypeExts[ft][et]
        end for
        ftypes &= {{FileTypeDescriptions[ft], exts}}
    end for
    ftypes &= {{"all", "*.*"}}
    
    selfiles = dlgfile:os_select_open_file("winMain", ftypes, 1)
    
    if sequence(selfiles) then
        if length(selfiles) = 1 then
            filelist &= {{filesys:pathname(selfiles[1]) & "\\", filesys:filename(selfiles[1]), 0}} --{filepath, filename, readonly}
            
        elsif length(selfiles) > 1 then
            for f = 2 to length(selfiles) do
                filelist &= {{selfiles[1] & "\\", selfiles[f], 0}} --{filepath, filename, readonly}
            end for
        end if
    else
        --no file selected
    end if
    
    if length(filelist) > 0 then
        action:do_proc("file_load", {filelist})
    end if
end procedure


procedure do_file_load(sequence filelist) --filelist: {{filepath, filename, readonly}, ...}
    atom fn
    object ln, tablabel, txt
    sequence filename
    
    for f = 1 to length(filelist) do
        tablabel = filelist[f][2]
        filename = filelist[f][1] & filelist[f][2]
        
        txt = ""
        
        if find(filename, fTabFileNames) then
            select_file_tab(filename)
        else
            fn = open(filename, "r")
            if fn = -1 then
                -- "read_file() error!"
                if filesys:file_exists(filename) then
                    create_tab(tablabel, "File read error", "Unable to open \"" & filename & "\".", filelist[f][3])
                else
                    create_tab(tablabel, "File read error", "The file \"" & filename & "\" does not exist.", filelist[f][3])
                end if
            else
                while 1 do
                    ln = gets(fn)
                    if sequence(ln) then
                        --ln = remove_all(10, ln)
                        --ln = remove_all(13, ln)
                        txt &= ln
                    else
                        exit
                    end if
                end while
                close(fn)
                
                create_tab(tablabel, filename, txt, filelist[f][3])
            end if
        end if
    end for
end procedure


procedure do_file_open_recent()
end procedure


procedure do_file_cleanup_recent()
end procedure


procedure do_file_clear_recent()
end procedure


procedure do_file_save()
    atom fidx = find(CurrentTab, fTabNames)
    if fidx > 0 then
        if txtdoc:is_modified(CurrentTab & ".filepage") then
            if equal(fTabFileNames[fidx], NullFileName) or not file_exists(fTabFileNames[fidx]) then
                action:do_proc("file_save_as", {})
            else
                --pretty_print(1, {"Save", CurrentTab & ".filepage", fTabFileNames[fidx]}, {2})
                txtdoc:save_to_file(CurrentTab & ".filepage", fTabFileNames[fidx])
                txtdoc:set_modified(CurrentTab & ".filepage", 0)
                fTabFileModifyTime[fidx] = filesys:file_timestamp(fTabFileNames[fidx])
            end if
        end if
    end if
end procedure


procedure do_file_save_all()
    sequence ftabs = fTabNames
    for f = 1 to length(ftabs) do
        action:do_proc("file_switch_to", {ftabs[f]})
        action:do_proc("file_save", {})
    end for
end procedure


procedure do_file_save_as()
    atom fidx = find(CurrentTab, fTabNames)
    if fidx > 0 then
        object newname
        
        if equal(fTabFileNames[fidx], NullFileName) then
            newname = dlgfile:os_select_save_file("winMain", pPath & "\\source\\untitled.e")
        else
            newname = dlgfile:os_select_save_file("winMain", fTabFileNames[fidx])
        end if
        if sequence(newname) then
            --pretty_print(1, newname, {2})
            sequence ans = "Overwrite"
            if file_exists(newname) then
                ans = msgbox:waitmsg(
                    "The file \"" & fTabFileNames[fidx] & "\" already exists. Do you want to overwrite it?",
                    "Question",
                    {"Overwrite", "Cancel"}
                )
            end if
            if equal(ans, "Overwrite") then
                fTabFileNames[fidx] = newname
                set_tab_label(CurrentTab, filesys:filename(newname))
                set_tab_title(CurrentTab, newname)
                --pretty_print(1, {"Save As", CurrentTab & ".filepage", fTabFileNames[fidx]}, {2})
                txtdoc:save_to_file(CurrentTab & ".filepage", fTabFileNames[fidx])
                txtdoc:set_modified(CurrentTab & ".filepage", 0)
                fTabFileModifyTime[fidx] = filesys:file_timestamp(fTabFileNames[fidx])
                action:do_proc("project_refresh", {})
                update_tab_info(fidx)
            end if
        end if
    end if
end procedure


procedure do_file_switch_to(object selectedtab)
    atom tidx
    CurrentTab = selectedtab
    action:setfocus(CurrentTab)
    if length(selectedtab) > 0 then
        tidx = find(CurrentTab, fTabNames)
        if tidx > 0 then
            update_tab_info(tidx)
            
            if fTabFileReadOnlys[tidx] then
                action:set_enabled("file_close", 1)
                action:set_enabled("file_close_all", 1)
                action:set_enabled("file_save", 0)
                action:set_enabled("file_save", txtdoc:is_modified(CurrentTab & ".filepage"))
                action:set_enabled("file_save_as", 1)
                action:set_enabled("file_save_all", 1)
            
                action:set_enabled("undo", 0)
                action:set_enabled("redo", 0)
                action:set_enabled("cut", 0)
                action:set_enabled("copy", 1)
                action:set_enabled("paste", 0)
                action:set_enabled("delete", 0)
                action:set_enabled("select_all", 1)
                action:set_enabled("comment", 0)
                action:set_enabled("uncomment", 0)
                action:set_enabled("beautify", 0)
                action:set_enabled("format_indent_less", 0)
                action:set_enabled("format_indent_more", 0)
                
                action:set_enabled("show_code_builder", 0)
                
                if not equal(fTabFileTypes[tidx], "image") then
                    action:set_enabled("find", 1)
                    action:set_enabled("find_prev", 1)
                    action:set_enabled("find_next", 1)
                    action:set_enabled("find_replace", 0)
                    action:set_enabled("show_goto", 1)
                    action:set_enabled("show_bookmarks", 1)
                end if
                
            else
                action:set_enabled("file_close", 1)
                action:set_enabled("file_close_all", 1)
                action:set_enabled("file_save", 1)
                action:set_enabled("file_save", txtdoc:is_modified(CurrentTab & ".filepage"))
                action:set_enabled("file_save_as", 1)
                action:set_enabled("file_save_all", 1)
                
                switch fTabFileTypes[tidx] do
                case "source" then
                    action:set_enabled("undo", 0)
                    action:set_enabled("redo", 0)
                    action:set_enabled("cut", 1)
                    action:set_enabled("copy", 1)
                    action:set_enabled("paste", 1)
                    action:set_enabled("delete", 1)
                    action:set_enabled("select_all", 1)
                    action:set_enabled("comment", 1)
                    action:set_enabled("uncomment", 1)
                    action:set_enabled("beautify", 1)
                    action:set_enabled("format_indent_less", 1)
                    action:set_enabled("format_indent_more", 1)
                    
                    action:set_enabled("find", 1)
                    action:set_enabled("find_prev", 1)
                    action:set_enabled("find_next", 1)
                    action:set_enabled("find_replace", 1)
                    action:set_enabled("show_goto", 1)
                    action:set_enabled("show_bookmarks", 1)
                    
                    action:set_enabled("show_code_builder", 1)
                case "doc" then
                    action:set_enabled("undo", 0)
                    action:set_enabled("redo", 0)
                    action:set_enabled("cut", 1)
                    action:set_enabled("copy", 1)
                    action:set_enabled("paste", 1)
                    action:set_enabled("delete", 1)
                    action:set_enabled("select_all", 1)
                    action:set_enabled("comment", 1)
                    action:set_enabled("uncomment", 1)
                    action:set_enabled("beautify", 1)
                    action:set_enabled("format_indent_less", 1)
                    action:set_enabled("format_indent_more", 1)
                    
                    action:set_enabled("find", 1)
                    action:set_enabled("find_prev", 1)
                    action:set_enabled("find_next", 1)
                    action:set_enabled("find_replace", 1)
                    action:set_enabled("show_goto", 1)
                    action:set_enabled("show_bookmarks", 1)
                
                    action:set_enabled("show_code_builder", 0)
                    /* --possibly implement format actions:
                    "text_style_select"
                    "format_text_normal"
                    "format_text_bold"
                    "format_text_italic"
                    "format_text_underline"
                    "format_text_strikethrough"
                    "format_justify_center"
                    "format_justify_fill"
                    "format-justify-left"
                    "format_justify_right"
                    "insert_link"
                    "insert_image"
                    */
                    
                case "image" then
                    action:set_enabled("undo", 0)
                    action:set_enabled("redo", 0)
                    action:set_enabled("cut", 0)
                    action:set_enabled("copy", 1)
                    action:set_enabled("paste", 0)
                    action:set_enabled("delete", 0)
                    action:set_enabled("select_all", 1)
                    action:set_enabled("comment", 0)
                    action:set_enabled("uncomment", 0)
                    action:set_enabled("beautify", 0)
                    action:set_enabled("format_indent_less", 0)
                    action:set_enabled("format_indent_more", 0)
                    
                    action:set_enabled("find", 0)
                    action:set_enabled("find_prev", 0)
                    action:set_enabled("find_next", 0)
                    action:set_enabled("find_replace", 0)
                    action:set_enabled("show_goto", 0)
                    action:set_enabled("show_bookmarks", 0)
                    
                    action:set_enabled("show_code_builder", 0)
                case else
                    action:set_enabled("undo", 0)
                    action:set_enabled("redo", 0)
                    action:set_enabled("cut", 1)
                    action:set_enabled("copy", 1)
                    action:set_enabled("paste", 1)
                    action:set_enabled("delete", 1)
                    action:set_enabled("select_all", 1)
                    action:set_enabled("comment", 0)
                    action:set_enabled("uncomment", 0)
                    action:set_enabled("beautify", 0)
                    action:set_enabled("format_indent_less", 1)
                    action:set_enabled("format_indent_more", 1)
                    
                    action:set_enabled("find", 1)
                    action:set_enabled("find_prev", 1)
                    action:set_enabled("find_next", 1)
                    action:set_enabled("find_replace", 1)
                    action:set_enabled("show_goto", 1)
                    action:set_enabled("show_bookmarks", 1)
                    
                    action:set_enabled("show_code_builder", 0)
                end switch
            end if
        end if
        
    else
        navfile:refresh_toc()
        
        action:set_enabled("file_close", 0)
        action:set_enabled("file_close_all", 0)
        action:set_enabled("file_save", 0)
        action:set_enabled("file_save_as", 0)
        action:set_enabled("file_save_all", 0)
        
        action:set_enabled("undo", 0)
        action:set_enabled("redo", 0)
        action:set_enabled("cut", 0)
        action:set_enabled("copy", 0)
        action:set_enabled("paste", 0)
        action:set_enabled("delete", 0)
        action:set_enabled("select_all", 0)
        action:set_enabled("comment", 0)
        action:set_enabled("uncomment", 0)
        action:set_enabled("beautify", 0)
        action:set_enabled("format_indent_less", 0)
        action:set_enabled("format_indent_more", 0)
        
        action:set_enabled("find", 0)
        action:set_enabled("find_prev", 0)
        action:set_enabled("find_next", 0)
        action:set_enabled("find_replace", 0)
        action:set_enabled("show_goto", 0)
        action:set_enabled("show_bookmarks", 0)
        
        action:set_enabled("show_code_builder", 0)
    end if
end procedure


procedure do_file_close()
    sequence ans = "Discard"
    atom fidx = find(CurrentTab, fTabNames)
    if fidx > 0 then
        if txtdoc:is_modified(CurrentTab & ".filepage") then
            ans = msgbox:waitmsg("Do you want to save the file \"" & fTabFileNames[fidx] & "\" before closing it?", "Question",
            {"Save", "Discard", "Cancel"})
        end if
        if equal(ans, "Save") then
            action:do_proc("file_save", {})
            destroy_tab(CurrentTab)
        elsif equal(ans, "Discard") then
            destroy_tab(CurrentTab)
        end if
    end if
end procedure


procedure do_file_close_all()
    sequence ftabs = fTabNames
    for f = 1 to length(ftabs) do
        action:do_proc("file_switch_to", {ftabs[f]})
        action:do_proc("file_close", {})
    end for
end procedure



-------------------------------------------------------------------------------



procedure gui_event(object evwidget, object evtype, object evdata)
    --pretty_print(1, {evwidget, evtype, evdata}, {2})
    if equal(evwidget, "winMain") then
        if equal(evtype, "GotFocus") then
            action:do_proc("project_refresh", {})
            atom tabidx = find(CurrentTab, fTabNames)
            if tabidx > 0 then
                update_tab_info(tabidx)
            end if
        end if
    else
        for fidx = 1 to length(fTabNames) do
            if equal(evtype, "clicked") then
                if equal(evwidget, fTabNames[fidx] & ".btnErrorGoToLine") then
                    action:do_proc("project_show_error", {})
                    exit
                    
                elsif equal(evwidget, fTabNames[fidx] & ".btnErrorHelp") then
                    action:do_proc("file_load", {{{pPath & "\\source\\", "ex.err", 0}}})
                    exit
                    
                elsif equal(evwidget, fTabNames[fidx] & ".btnErrorSaveAndRun") then
                    action:do_proc("file_save", {})
                    action:do_proc("app_run_default", {})
                    exit
                    
                elsif equal(evwidget, fTabNames[fidx] & ".btnErrAnalysisGoToError") then
                    action:do_proc("project_show_error", {})
                    exit
                    
                elsif equal(evwidget, fTabNames[fidx] & ".btnExtWarnEdit") then
                    --turn off read-only mode
                    txtdoc:set_locked(fTabNames[fidx] & ".filepage", 0)
                    update_tab_info(fidx)
                    exit
                    
                elsif equal(evwidget, fTabNames[fidx] & ".btnFileChangedReload") then
                    --reload file
                    atom islocked = txtdoc:is_locked(fTabNames[fidx] & ".filepage")
                    sequence pathname = filesys:pathname(fTabFileNames[fidx]) & "\\",
                    filename = filesys:filename(fTabFileNames[fidx])
                    txtdoc:set_modified(fTabNames[fidx] & ".filepage", 0)
                    action:do_proc("file_close", {})
                    action:do_proc("file_load", {{{pathname, filename, islocked}}})
                    exit
                    
                end if
            end if
            
            if equal(evwidget, fTabNames[fidx] & ".filepage") then
                if equal(evtype, "modified") then
                    app:set_tab_modified(fTabNames[fidx], evdata)
                    if equal(CurrentTab, fTabNames[fidx]) then
                        action:set_enabled("file_save", evdata)
                    end if
                    
                elsif equal(evtype, "locked") then
                    app:set_tab_readonly(fTabNames[fidx], evdata)
                    fTabFileReadOnlys[fidx] = evdata
                    if equal(CurrentTab, fTabNames[fidx]) then
                        do_file_switch_to(fTabNames[fidx]) --reset toolbars
                    end if
                    
                elsif equal(evtype, "toc_refresh") then
                    navfile:refresh_toc()
                end if
                exit
            end if
        end for
    end if
end procedure
    

procedure start()
    sequence cmdline = command_line()
    object CmdFile = 0, CmdAction = "edit"
    
    app:create_main_window(routine_id("gui_event"))
    
    sequence ImgPath = ExePath & "\\images\\"
    gui:load_bitmap("folder_open_16", ImgPath & "folder_open_16.bmp")
    gui:load_bitmap("redy16", ImgPath & "redy16.bmp")
    gui:load_bitmap("e16", ImgPath & "e16.bmp")
    gui:load_bitmap("ex16", ImgPath & "ex16.bmp")
    gui:load_bitmap("err16", ImgPath & "err16.bmp")
    gui:load_bitmap("txt16", ImgPath & "txt16.bmp")
    gui:load_bitmap("img16", ImgPath & "img16.bmp")
    
    
    
    --set_tabs_double_click_action("file_close") --these are not necessary, defaults are already the same as this 
    --set_tabs_select_action("file_switch_to")
    
    --todo: show crash message if previously crashed
    
    if length(cmdline) > 2 then
        for c = 3 to length(cmdline) do
            if match(cmdline, "--") = 1 then
                CmdAction = lower(cmdline[3..$])
            else
                if equal(filesys:fileext(cmdline[c]), "redy") and file_exists(cmdline[c]) then
                    CmdFile = cmdline[c]
                end if
            end if
        end for
    end if
    
    if sequence(CmdFile) then
        --puts(1, CmdAction & ": " & CmdFile & "\n")
        action:do_proc("list_projects", {})
        switch CmdAction do
        case "edit" then
            action:do_proc("project_load", {CmdFile})
        case "run" then
            action:do_proc("project_load", {CmdFile})
            action:do_proc("app_run_default", {})
        case "build" then
            action:do_proc("project_load", {CmdFile})
        end switch
    else
        action:do_proc("show_splash")
        tips:start()
        action:do_proc("list_projects", {})
    end if
end procedure

gui:start(routine_id("start"), routine_id("gui_event"))








