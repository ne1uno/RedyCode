-- This file is part of RedyCode™ Integrated Development Environment
-- <http://redy-project.org/>
-- 
-- Copyright 2015 Ryan W. Johnson
-- 
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
-- 
--   http://www.apache.org/licenses/LICENSE-2.0
-- 
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.


--TODO: research adding icon to exe file: 'wrc RedyCode.exe RedyCode.rc'


without warning

--Redy Application info
global constant 
App_Name = "Redy Application Launcher",
App_Version = "1.0.0a",
App_AboutText = {
    App_Name & "™ " & App_Version & " (alpha)",
    "Copyright© 2015™ Ryan Johnson",
    "Programmed in the Euphoria programming language",
    "with Redy™ Application Environment"
}
--redylib includes
include gui/gui.e as gui
include gui/dialogs/dialog_file.e as dlgfile
include gui/dialogs/msgbox.e as msgbox
include gui/dialogs/about.e as about

include app/msg.e as msg
include app/config.e as cfg

--stdlib includes
include std/task.e
include std/text.e
include std/pretty.e
include std/filesys.e

--Modules
include redy_config.e as config --redy environment config dialog

atom void
sequence currProjectPath = "", currApp = ""

procedure list_projects()
    sequence listitems = {}
    
    if length(get_projects_path()) > 0 then
        object flist = dir(get_projects_path())
        if sequence(flist) then
            for f = 1 to length(flist) do 
                if find('d', flist[f][D_ATTRIBUTES]) and not find(flist[f][D_NAME], {".", ".."}) then
                    listitems &= {{0, flist[f][D_NAME]}}
                end if
            end for
        end if
    end if
    
    gui:wproc("lstProjects", "clear_list", {})
    gui:wproc("lstProjects", "add_list_items", {listitems})
end procedure


procedure list_apps(sequence projectpath)
    sequence listitems = {}
    
    if length(projectpath) > 0 then
        object flist = dir(projectpath)
        if sequence(flist) then
            for f = 1 to length(flist) do
                if not find('d', flist[f][D_ATTRIBUTES]) then
                    if match(".ex", flist[f][D_NAME]) = length(flist[f][D_NAME]) - 2 then --euphoria executable
                        listitems &= {{rgb(210,210,210), flist[f][D_NAME]}}
                    elsif match(".exw", flist[f][D_NAME]) = length(flist[f][D_NAME]) - 3 then --euphoria executable
                        listitems &= {{rgb(210,210,210), flist[f][D_NAME]}}
                    end if
                end if
            end for
        end if
    end if
    
    gui:wproc("lstApps", "clear_list", {})
    gui:wproc("lstApps", "add_list_items", {listitems})
end procedure


--run_app(sequence projectfile, sequence appfile, atom watcherr = 1)
procedure run_app(sequence appfile)
    if file_exists(appfile) then
        --puts(1, "Running '" & appfile & "'...\n")
        sequence cmdline = 
        --" -EUDIR \"\"" & eupath --is this needed to override possible conflicts with installed version of euphoria? 
        " -I \"" & get_redylib_path() & "\" -I \"" & get_euinclude_path() & "\" \"" & appfile & "\""
        --puts(1, cmdline & "\n")
        --puts(1, currProjectPath & "\n")
        gui:ShellExecute(gui:widget_get_handle("winMain"), get_euiw_path(), cmdline, "open", currProjectPath)
    end if
end procedure

/* --old version:
procedure run_app(sequence appfile)
    if file_exists(appfile) then
        sequence cmdline = " -I \"" & get_redylib_path() & "\" -I \"" & get_euinclude_path() & "\""
        & " \"" & appfile & "\""
        --system_exec(cmdline)
        --gui:RunApp(gui:widget_get_handle("winMain"), get_euiw_path(), cmdline)
        gui:ShellExecute(gui:widget_get_handle("winMain"), get_euiw_path(), cmdline, "open", currProjectPath & "\\source\\")
    end if
end procedure*/


procedure gui_event(object evwidget, object evtype, object evdata)
    switch evwidget do
        case "mnuMain.mnuApplication" then
            switch evdata do
                case "Run..." then
                    msg:publish("main", "command", "run", 0)
                    
                case "Redy Debug Console..." then
                    msg:publish("menu", "command", "gui_debug", 0)
                    
                case "Redy configuration..." then
                    msg:publish("main", "command", "config", 0)
                    
                case "About Redy..." then
                    msg:publish("main", "command", "about", 0)
                    
                case "Exit" then
                    msg:publish("main", "command", "exit", 0)
                    
            end switch
        case "lstProjects" then
            if equal(evtype, "selection") then
                if sequence(evdata) and length(evdata) > 0 then
                    currProjectPath = get_projects_path() & evdata[1][2][1] & "/source/"
                    list_apps(currProjectPath)
                    gui:wproc("lstApps", "select_items", {{1}})
                end if
            end if
            
        case "lstApps" then
            if equal(evtype, "selection") then
                if sequence(evdata) and length(evdata) > 0 then
                    currApp = evdata[1][2][1]
                end if
                
            elsif equal(evtype, "left_double_click") then
                if sequence(evdata) and length(evdata) > 0 then
                    currApp = evdata[1][2][1]
                    run_app(currProjectPath & currApp)
                end if
            end if
            
        case "cmdRun" then
            switch evtype do
                case "clicked" then
                    run_app(currProjectPath & currApp)
            end switch
            
        case "winMain" then
            if equal(evtype, "closed") then
                msg:publish("menu", "command", "exit", 0)
            end if
               
    end switch
end procedure

--{subscribername, topicname, msgname, msgdata, errlist})
procedure msg_debug_event(sequence subscribername, sequence topicname, sequence msgname, object msgdata, object errlist)
    gui:debug("msg:publish", {"subscribername=" & subscribername, "topicname=" & topicname, "msgname=" & msgname, "msgdata=" & sprint(msgdata)})
end procedure


function msg_event(sequence subscribername, sequence topicname, sequence msgname, object msgdata)
    --gui:debug("msg_event", {"subscribername=" & subscribername, "topicname=" & topicname, "msgname=" & msgname, "msgdata=" & sprint(msgdata)})
    switch topicname do
        case "command" then
            if equal(msgname, "gui_debug") then
                gui:show_debug()
    
            elsif equal(msgname, "about") then
                about:show()
                
            elsif equal(msgname, "exit") then
                --sequence ans = msgbox:waitmsg("Are you sure you want to exit?", "Question")
                sequence ans = "Yes"
                if equal(ans, "Yes") then
                    /*deinitialize code here*/
                    --get winMain pos and size
                    sequence winpos = gui:get_window_pos(widget_get_handle("winMain"))
                    sequence winsize = gui:get_window_size(widget_get_handle("winMain"))
                    cfg:set_var(App_Name & ".cfg", "GUI", "winMain.left", winpos[1])
                    cfg:set_var(App_Name & ".cfg", "GUI", "winMain.top", winpos[2])
                    cfg:set_var(App_Name & ".cfg", "GUI", "winMain.width", winsize[1])
                    cfg:set_var(App_Name & ".cfg", "GUI", "winMain.height", winsize[2])
                    cfg:save_config(App_Name & ".cfg")
                    
                    gui:wdestroy("winMain")
                end if
            end if
    end switch
    return 1
end function


procedure start()
    sequence scrsize = gui:screen_size()
    atom wleft, wtop, wwidth, wheight
    
    cfg:load_config(App_Name & ".cfg")
    
    config:start()
        
    sequence cmd = command_line()
    
    --pretty_print(1, cmd, {2})
    
    if length(cmd) > 3 then
        gui:wcreate({
            {"name", "winMain"},
            {"class", "window"},
            {"title", App_Name},
            {"visible", 0},
            {"allow_close", 1}
        })
        sequence exfile = get_projects_path() & cmd[3] & "\\source\\" & cmd[4]
        sequence ans
        
        if not file_exists(get_euiw_path()) then 
            --ans = msgbox:waitmsg("The path to euiw.exe is invalid. Please run RedyExec without arguments to configure paths.", "Error")
            
        else
            if file_exists(exfile) then
                run_app(exfile)
                
                --sequence cmdline = get_euiw_path() & " -I \"" & get_redylib_path() & "\" -I \"" & get_euinclude_path() & "\""
                --& " \"" & exfile & "\""
                --puts(1, cmdline & "\n")
                --system_exec(cmdline)
                --abort(0)
            else
                ans = msgbox:waitmsg("RedyExec error: the file \"" & canonical_path(exfile) & "\" does not exist.", "Error")
            end if
        end if
        gui:wdestroy("winMain")
    end if
    
    wleft = cfg:get_var(App_Name & ".cfg", "GUI", "winMain.left")
    wtop = cfg:get_var(App_Name & ".cfg", "GUI", "winMain.top")
    wwidth = cfg:get_var(App_Name & ".cfg", "GUI", "winMain.width")
    wheight = cfg:get_var(App_Name & ".cfg", "GUI", "winMain.height")
    
    if wwidth > scrsize[1] then
        wwidth = scrsize[1]
    end if
    if wheight > scrsize[2] then
        wheight = scrsize[2]
    end if
    if wwidth = 0 then
        wwidth = 640
    end if
    if wheight = 0 then
        wheight = 480
    end if
    if wleft > scrsize[1] then
        wleft = scrsize[1] - wwidth
    end if
    if wtop > scrsize[2] then
        wtop = scrsize[2] - wtop
    end if
    if wleft < 0 then
        wleft = 0
    end if
    if wtop < 0 then
        wtop = 0
    end if
    
    gui:wcreate({
        {"name", "winMain"},
        {"class", "window"},
        {"title", App_Name},
        --{"position", {floor(scrsize[1] / 2), floor(scrsize[2] / 2)}},
        --{"size", {floor(scrsize[1] * 2 / 3), floor(scrsize[2] * 1 / 2)}},
        {"position", {wleft, wtop}},
        {"size", {wwidth, wheight}},
        {"visible", 1},
        {"allow_close", 0}
    })
    
    --Menus
    gui:wcreate({
        {"name", "mnuMain"},
        {"parent", "winMain"},
        {"class", "menubar"},
        {"handler", routine_id("gui_event")},
        {"menus", {
            {"Application", {
                "Run...",
                "-",
                "Redy configuration...",
                "About Redy...",
                "Redy Debug Console...",
                "-",
                "Exit"
                }
            }
        }
    }})
    
    gui:wcreate({
        {"name", "cntMain"},
        {"parent", "winMain"},
        {"class", "container"},
        {"orientation", "horizontal"},
        {"sizemode_x", "expand"},
        {"sizemode_y", "expand"}
    })
    
    gui:wcreate({
        {"name", "lstProjects"},
        {"parent", "cntMain"},
        {"class", "fancylist"},
        --{"size", {200, 0}},
        {"label", "Projects"}
    })
    gui:wcreate({
        {"name", "divProjects"},
        {"parent", "cntMain"},
        {"class", "divider"},
        {"attach", "lstProjects"},
        {"adjust", 200}
    })
    
    --gui:wproc("lstProjects", "clear_list", {})
    --gui:wproc("lstProjects", "add_list_items", {{
    --    {0, "Demos", "RedyLib Demo Apps"},
    --    {0, "RedyCode", "Redy App IDE"}
    --}})
    
    gui:wcreate({
        {"name", "cntRight"},
        {"parent", "cntMain"},
        {"class", "container"},
        {"orientation", "vertical"},
        {"sizemode_x", "expand"},
        {"sizemode_y", "expand"}
    })
    
    gui:wcreate({
        {"name", "lstApps"},
        {"parent", "cntRight"},
        {"class", "listbox"},
        {"label", "Applications"}
    })
    
    --gui:wproc("lstApps", "clear_list", {})
    --gui:wproc("lstApps", "add_column", {{"Name", 120, 0, 0}})
    --gui:wproc("lstApps", "add_column", {{"Description", 200, 0, 0}})
    --gui:wproc("lstApps", "add_list_items", {{
    --    {"redy16", "RedyCode", "Redy Integrated Development Environment"},
    --    {"redy16", "RedyExec", "Redy Application launcher"}
    --}})
    
    gui:wcreate({
        {"name", "cntCommands"},
        {"parent", "cntRight"},
        {"class", "container"},
        {"orientation", "horizontal"},
        {"sizemode_x", "equal"},
        {"sizemode_y", "equal"},
        {"justify_x", "right"}
    })
    
    gui:wcreate({
        {"name", "cmdRun"},
        {"parent", "cntCommands"},
        {"class", "button"},
        {"label", "Run"}
    })
    
    
    
    list_projects()
    gui:wproc("lstProjects", "select_items", {{1}})
    
    ------------------------
    
    msg:subscribe("main", "command", routine_id("msg_event"))    --sequence subscribername, sequence topicname, atom msghandlerid
    msg:debug(routine_id("msg_debug_event"))
end procedure

gui:start(routine_id("start"), routine_id("gui_event"))

