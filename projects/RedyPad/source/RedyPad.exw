-- This file is part of RedyCodeâ„¢ Integrated Development Environment
-- <http://redy-project.org/>
-- 
-- Copyright 2016 Ryan W. Johnson
-- 
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
-- 
--   http://www.apache.org/licenses/LICENSE-2.0
-- 
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
-------------------------------------------------------------------------------


without warning
--with define debug


include redylib_0_9/app.e as app
include redylib_0_9/actions.e as action
include redylib_0_9/gui.e as gui

include redylib_0_9/gui/dialogs/dialog_file.e as dlgfile
include redylib_0_9/gui/dialogs/msgbox.e as msgbox

include redylib_0_9/err.e as err

include redylib_0_9/gui/objects/textdoc.e as txtdoc

--include search.e
include help.e
--include preferences.e
--include tips.e as tips

include std/task.e
include std/text.e
include std/pretty.e
include std/utils.e
include std/sequence.e
include std/filesys.e

--Define Application Info
app:define({
    {"title", "RedyPad"},
    {"version", "0.9.0"},
    {"author", "Ryan W. Johnson"},
    {"copyright", "2016 Ryan W. Johnson"},
    {"license", {
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
          "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License."
    }},
    {"about", "Simple generic text editor with built-in syntax highlighting for the Euphoria programming language."}
})

-- Edit Files ----------------------------------------------------------------

sequence RecentFiles = {},
CurrentTab = ""

action:define({
    {"name", "file_new"},
    {"do_proc", routine_id("do_file_new")},
    {"label", "New"},
    {"icon", "document-new"},
    {"hotkey", "Ctrl+N"},
    {"description", "Create new file"}
})

action:define({
    {"name", "file_open"},
    {"do_proc", routine_id("do_file_open")},
    {"label", "Open..."},
    {"icon", "document-open"},
    {"hotkey", "Ctrl+O"},
    {"description", "Open a file"}
})

action:define({
    {"name", "file_switch_to"},
    {"do_proc", routine_id("do_file_switch_to")},
    {"label", "Switch to File"},
    --{"list", {}},
    {"description", "Switch to specified open file"}
})

action:define({
    {"name", "file_open_recent"},
    {"do_proc", routine_id("do_file_open_recent")},
    {"label", "Open Recent"},
    {"list", {
        {"", "(no recent files)", ""} --{icon, label, data}
        --{"", "1 file2.txt", "file2.txt"},
        --{"", "2 file3.txt", "file3.txt"}
    }},
    {"description", "Open a recent file"}
})

action:define({
    {"name", "file_cleanup_recent"},
    {"do_proc", routine_id("do_file_cleanup_recent")},
    {"label", "Remove nonexistant recent files"},
    {"icon", ""},
    {"description", "Remove nonexistant files from recent files list"},
    {"enabled", 0}
})

action:define({
    {"name", "file_clear_recent"},
    {"do_proc", routine_id("do_file_clear_recent")},
    {"label", "Clear recent files"},
    {"icon", ""},
    {"description", "Clear recent files list"},
    {"enabled", 0}
})

action:define({
    {"name", "file_save"},
    {"do_proc", routine_id("do_file_save")},
    {"label", "Save"},
    {"icon", "document-save"},
    {"hotkey", "Ctrl+S"},
    {"description", "Save current file"},
    {"enabled", 0}
})

action:define({
    {"name", "file_save_as"},
    {"do_proc", routine_id("do_file_save_as")},
    {"label", "Save As..."},
    {"icon", "document-save-as"},
    {"description", "Save current file to a different file"},
    {"enabled", 0}
})

action:define({
    {"name", "file_save_all"},
    {"do_proc", routine_id("do_file_save_all")},
    {"label", "Save All"},
    {"icon", ""},
    {"hotkey", "Shift+Ctrl+S"},
    {"description", "Save all open files"},
    {"enabled", 0}
})

action:define({
    {"name", "file_close"},
    {"do_proc", routine_id("do_file_close")},
    {"label", "Close"},
    {"icon", "process-stop"},
    {"hotkey", "Ctrl+F4"},
    {"description", "Close current file"},
    {"enabled", 0}
})

action:define({
    {"name", "file_close_all"},
    {"do_proc", routine_id("do_file_close_all")},
    {"label", "Close All"},
    {"icon", ""},
    {"description", "Close all open files"},
    {"enabled", 0}
})


app:set_menus({
    {"File", {
        "file_new",
        "-",
        "file_open",
        /*{"Open Recent", {
            "file_open_recent",     --this will use list_func to automatically generate menu items
            "-",
            "file_cleanup_recent",
            "file_clear_recent"}
        },*/
        "file_close",
        "file_close_all",
        "-",
        "file_save",
        "file_save_as",
        "file_save_all",
        "-",
        "confirm_exit"}
    },
    {"Edit", {
        "undo",
        "redo",
        "-",
        "select_all",
        "-",
        "cut",
        "copy",
        "paste",
        "-",
        "delete",
        --"-",
        --"find",
        --"find_replace",
        "-",
        "format_indent_less",
        "format_indent_more"
        }
    },
    {"Options", {
        --"show_preferences",
        "show_edit_toolbars"}
    },
    --{"View", {
    --    "file_switch_to"}
    --},
    {"Help", {
        "show_help",
        --"show_tips",
        "-",
        "show_about"}
    }
})

app:set_default_toolbars({
    {"File", "top", {
        "file_new",
        "file_open",
        "file_close",
        "-",
        "file_save",
        "file_save_as"}
    },
    {"Edit", "top", {
        "undo",
        "redo",
        "-",
        "cut",
        "copy",
        "paste",
        "delete",
        --"-",
        --"find",
        --"find_replace",
        "-",
        "format_indent_less",
        "format_indent_more"}
    }
})


-- Tab/File Management -----------------------------------------------------------------------------

constant NullFileName = "(Untitled)"

sequence
fTabNames = {},
fTabFileNames = {}


--todo: use tablist instead
procedure create_tab(sequence tablabel, sequence filename, sequence txt)
    sequence tabname = app:create_tab(tablabel, filename)
    sequence ext = filesys:fileext(filename)
    sequence SyntaxType = "plain" 
    
    --sequence flist = {}
    --for f = 1 to length(fTabNames) do
    --    flist &= {{"document", fTabFileNames[f], fTabNames[f]}}
    --end for
    --set_list("file_switch_to", flist)
    
    if length(fTabNames) = 1 and equal(fTabFileNames[1], NullFileName) and not equal(filename, NullFileName) then
        destroy_tab(fTabNames[1])
    end if
    
    fTabNames &= {tabname}
    fTabFileNames &= {filename}
    
    if find(ext, {"ex", "ew", "exw", "e"}) then
        SyntaxType = "euphoria"
    end if
    
    app:set_tab_context_menu(tabname, {
        "file_close",
        "file_close_all",
        "-",
        "file_save",
        "file_save_as",
        "-",
        "file_reopen"
    })
    
    txtdoc:create({
        {"name", tabname & ".textedit"},
        {"text", txt},
        {"syntax_mode", SyntaxType},
        {"autofocus", 1},
        {"handler", routine_id("gui_event")}
    })
    
    txtdoc:show(tabname & ".textedit", tabname)
end procedure


procedure destroy_tab(sequence tabname)
    atom idx = find(tabname, fTabNames)
    if idx > 0 then
        fTabNames = remove(fTabNames, idx)
        fTabFileNames = remove(fTabFileNames, idx)
        app:destroy_tab(tabname)
        txtdoc:destroy(tabname & ".textedit")
        
        if length(fTabNames) = 0 then
            action:set_enabled("file_close", 0)
            action:set_enabled("file_close_all", 0)
            action:set_enabled("file_save", 0)
            action:set_enabled("file_save_as", 0)
            action:set_enabled("file_save_all", 0)
        end if
        
        --sequence flist = {}
        --for f = 1 to length(fTabNames) do
        --    flist &= {{"document", fTabFileNames[f], fTabNames[f]}}
        --end for
        --set_list("file_switch_to", flist)
    end if
end procedure


-- Action Procs -----------------------------------------------------------------------------


procedure do_file_new()
    create_tab("Untitled", NullFileName, "")
end procedure


procedure do_file_open()
    atom fn
    object ln, tablabel, filename, txt
    object selfiles = dlgfile:os_select_open_file("winMain", {
        {"All", "*.*"},
        {"Text", "*.txt;*.cfg;*.ini;*.log"},
        {"Euphoria", "*.exw;*.ex;*.ew;*.e"}
    }, 1)
    
    if sequence(selfiles) then
        if length(selfiles) = 1 then
            tablabel = filesys:filename(selfiles[1])
            filename = selfiles[1]
            txt = ""
            
            fn = open(filename, "r")
            if fn = -1 then
                -- "read_file() error!"
            else
                while 1 do
                    ln = gets(fn)
                    if sequence(ln) then
                        --ln = remove_all(10, ln)
                        --ln = remove_all(13, ln)
                        txt &= ln
                    else
                        exit
                    end if
                end while
                close(fn)
                
                if not find(filename, fTabFileNames) then
                    create_tab(tablabel, filename, txt)
                end if
            end if
            
        elsif length(selfiles) > 1 then
            for f = 2 to length(selfiles) do
                tablabel = selfiles[f]
                filename = selfiles[1] & "\\" & selfiles[f]
                txt = ""
                
                fn = open(filename, "r")
                if fn = -1 then
                    -- "read_file() error!"
                else
                    while 1 do
                        ln = gets(fn)
                        if sequence(ln) then
                            --ln = remove_all(10, ln)
                            --ln = remove_all(13, ln)
                            txt &= ln
                        else
                            exit
                        end if
                    end while
                    close(fn)
                    
                    if not find(filename, fTabFileNames) then
                        create_tab(tablabel, filename, txt)
                    end if
                end if
            end for
        end if
    else
        --no file selected
    end if
end procedure


procedure do_file_open_recent()
end procedure


procedure do_file_cleanup_recent()
end procedure


procedure do_file_clear_recent()
end procedure


procedure do_file_save()
    atom fidx = find(CurrentTab, fTabNames)
    if fidx > 0 then
        if txtdoc:is_modified(CurrentTab & ".textedit") then
            if equal(fTabFileNames[fidx], NullFileName) or not file_exists(fTabFileNames[fidx]) then
                action:do_proc("file_save_as", {})
            else
                --pretty_print(1, {"Save", CurrentTab & ".textedit", fTabFileNames[fidx]}, {2})
                txtdoc:save_to_file(CurrentTab & ".textedit", fTabFileNames[fidx])
                txtdoc:set_modified(CurrentTab & ".textedit", 0) 
            end if
        end if
    end if
end procedure


procedure do_file_save_all()
    sequence ftabs = fTabNames
    for f = 1 to length(ftabs) do
        action:do_proc("file_switch_to", {ftabs[f]})
        action:do_proc("file_save", {})
    end for
end procedure


procedure do_file_save_as()
    atom fidx = find(CurrentTab, fTabNames)
    if fidx > 0 then
        object newname
        if equal(fTabFileNames[fidx], NullFileName) then
            newname = dlgfile:os_select_save_file("winMain", "")
        else
            newname = dlgfile:os_select_save_file("winMain", fTabFileNames[fidx])
        end if
        if sequence(newname) then
            --pretty_print(1, newname, {2})
            sequence ans = "Overwrite"
            if file_exists(newname) then
                ans = msgbox:waitmsg(
                    "The file \"" & fTabFileNames[fidx] & "\" already exists. Do you want to overwrite it?",
                    "Question",
                    {"Overwrite", "Cancel"}
                )
            end if
            if equal(ans, "Overwrite") then
                fTabFileNames[fidx] = newname
                set_tab_label(CurrentTab, filesys:filename(newname))
                set_tab_title(CurrentTab, newname)
                --pretty_print(1, {"Save As", CurrentTab & ".textedit", fTabFileNames[fidx]}, {2})
                txtdoc:save_to_file(CurrentTab & ".textedit", fTabFileNames[fidx])
                txtdoc:set_modified(CurrentTab & ".textedit", 0)
            end if
        end if
    end if
end procedure


procedure do_file_switch_to(object selectedtab)
    CurrentTab = selectedtab
    if length(selectedtab) > 0 and find(CurrentTab, fTabNames) > 0 then
        action:set_enabled("file_close", 1)
        action:set_enabled("file_close_all", 1)
        action:set_enabled("file_save", 1)
        action:set_enabled("file_save", txtdoc:is_modified(CurrentTab & ".textedit"))
        action:set_enabled("file_save_as", 1)
        action:set_enabled("file_save_all", 1)
    else
        action:set_enabled("file_close", 0)
        action:set_enabled("file_close_all", 0)
        action:set_enabled("file_save", 0)
        action:set_enabled("file_save_as", 0)
        action:set_enabled("file_save_all", 0)
    end if
end procedure


procedure do_file_close()
    sequence ans = "Discard"
    atom fidx = find(CurrentTab, fTabNames)
    if fidx > 0 then
        if txtdoc:is_modified(CurrentTab & ".textedit") then
            ans = msgbox:waitmsg("Do you want to save the file \"" & fTabFileNames[fidx] & "\" before closing it?", "Question",
            {"Save", "Discard", "Cancel"})
        end if
        if equal(ans, "Save") then
            action:do_proc("file_save", {})
            destroy_tab(CurrentTab)
        elsif equal(ans, "Discard") then
            destroy_tab(CurrentTab)
        end if
    end if
end procedure


procedure do_file_close_all()
    sequence ftabs = fTabNames
    for f = 1 to length(ftabs) do
        action:do_proc("file_switch_to", {ftabs[f]})
        action:do_proc("file_close", {})
    end for
end procedure



-------------------------------------------------------------------------------



procedure gui_event(object evwidget, object evtype, object evdata)
    --pretty_print(1, {evwidget, evtype, evdata}, {2})
    for fidx = 1 to length(fTabNames) do
        if equal(evwidget, fTabNames[fidx] & ".textedit") then
            if equal(evtype, "modified") then
                app:set_tab_modified(fTabNames[fidx], evdata)
                if equal(CurrentTab, fTabNames[fidx]) then
                    action:set_enabled("file_save", evdata)
                end if
            end if
            exit
        end if
    end for
end procedure
    

procedure start()
    app:create_main_window()
    
    --tips:start()
    
    --set_tabs_double_click_action("file_close") --these are not necessary, defaults are already the same as this 
    --set_tabs_select_action("file_switch_to")
    
    action:do_proc("file_new")
end procedure

gui:start(routine_id("start"), routine_id("gui_event"))



